# KidGuard Test Script
# Script ƒë·ªÉ test c√°c ch·ª©c nƒÉng ch√≠nh c·ªßa KidGuard
# Y√™u c·∫ßu: PowerShell 5.1+ v√† quy·ªÅn Administrator

Write-Host "================================" -ForegroundColor Cyan
Write-Host "   KIDGUARD TEST SCRIPT v1.0   " -ForegroundColor Cyan
Write-Host "================================" -ForegroundColor Cyan
Write-Host ""

# Ki·ªÉm tra quy·ªÅn Administrator
$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
if (-not $isAdmin) {
    Write-Host "‚ùå Script c·∫ßn ch·∫°y v·ªõi quy·ªÅn Administrator!" -ForegroundColor Red
    Write-Host "ƒêang kh·ªüi ƒë·ªông l·∫°i v·ªõi quy·ªÅn Admin..." -ForegroundColor Yellow
    Start-Process powershell -Verb RunAs -ArgumentList "-File `"$PSCommandPath`""
    exit
}

Write-Host "‚úÖ ƒêang ch·∫°y v·ªõi quy·ªÅn Administrator" -ForegroundColor Green
Write-Host ""

# Ki·ªÉm tra .NET 9 ƒë√£ c√†i ch∆∞a
Write-Host "üìã Ki·ªÉm tra .NET Runtime..." -ForegroundColor Yellow
$dotnetVersion = dotnet --list-runtimes | Where-Object { $_ -like "*Microsoft.WindowsDesktop.App 9.*" }
if ($dotnetVersion) {
    Write-Host "‚úÖ .NET 9 Desktop Runtime ƒë√£ c√†i ƒë·∫∑t" -ForegroundColor Green
    Write-Host "   $dotnetVersion" -ForegroundColor Gray
} else {
    Write-Host "‚ùå Ch∆∞a c√†i .NET 9 Desktop Runtime" -ForegroundColor Red
    Write-Host "   Vui l√≤ng c√†i ƒë·∫∑t t·ª´: https://dotnet.microsoft.com/download/dotnet/9.0" -ForegroundColor Yellow
}
Write-Host ""

# Build d·ª± √°n
Write-Host "üî® Building KidGuard..." -ForegroundColor Yellow
Set-Location -Path $PSScriptRoot
$buildResult = dotnet build --configuration Release 2>&1
if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Build th√†nh c√¥ng!" -ForegroundColor Green
} else {
    Write-Host "‚ùå Build th·∫•t b·∫°i!" -ForegroundColor Red
    Write-Host $buildResult -ForegroundColor Red
    exit 1
}
Write-Host ""

# Test 1: Ki·ªÉm tra hosts file
Write-Host "üß™ Test 1: Ki·ªÉm tra hosts file" -ForegroundColor Cyan
$hostsPath = "C:\Windows\System32\drivers\etc\hosts"
if (Test-Path $hostsPath) {
    Write-Host "‚úÖ Hosts file t·ªìn t·∫°i" -ForegroundColor Green
    
    # Backup hosts file
    $backupPath = "$hostsPath.backup_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
    Copy-Item $hostsPath $backupPath -Force
    Write-Host "‚úÖ ƒê√£ backup hosts file: $backupPath" -ForegroundColor Green
    
    # Ki·ªÉm tra quy·ªÅn ghi
    try {
        Add-Content -Path $hostsPath -Value "# KIDGUARD TEST" -ErrorAction Stop
        $content = Get-Content $hostsPath -Raw
        if ($content -match "# KIDGUARD TEST") {
            Write-Host "‚úÖ C√≥ th·ªÉ ghi v√†o hosts file" -ForegroundColor Green
            # X√≥a d√≤ng test
            $lines = Get-Content $hostsPath | Where-Object { $_ -ne "# KIDGUARD TEST" }
            Set-Content -Path $hostsPath -Value $lines -Force
        }
    } catch {
        Write-Host "‚ùå Kh√¥ng th·ªÉ ghi v√†o hosts file: $_" -ForegroundColor Red
    }
} else {
    Write-Host "‚ùå Hosts file kh√¥ng t·ªìn t·∫°i!" -ForegroundColor Red
}
Write-Host ""

# Test 2: Test ch·∫∑n website
Write-Host "üß™ Test 2: Test ch·ª©c nƒÉng ch·∫∑n website" -ForegroundColor Cyan
$testDomain = "test.kidguard.local"

# Th√™m entry test v√†o hosts
try {
    Add-Content -Path $hostsPath -Value "`n# === KIDGUARD BLOCK START ===" -ErrorAction Stop
    Add-Content -Path $hostsPath -Value "127.0.0.1 $testDomain"
    Add-Content -Path $hostsPath -Value "127.0.0.1 www.$testDomain"
    Add-Content -Path $hostsPath -Value "# === KIDGUARD BLOCK END ===" -ErrorAction Stop
    
    Write-Host "‚úÖ ƒê√£ th√™m domain test: $testDomain" -ForegroundColor Green
    
    # Ki·ªÉm tra ping
    Write-Host "   ƒêang test ping $testDomain..." -ForegroundColor Gray
    $pingResult = Test-Connection -ComputerName $testDomain -Count 1 -Quiet 2>$null
    if ($pingResult) {
        Write-Host "‚úÖ Domain ƒë√£ ƒë∆∞·ª£c redirect v·ªÅ 127.0.0.1" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Kh√¥ng th·ªÉ ping (c√≥ th·ªÉ do firewall)" -ForegroundColor Yellow
    }
    
    # Cleanup
    $lines = Get-Content $hostsPath | Where-Object { 
        $_ -notmatch "KIDGUARD" -and $_ -notmatch $testDomain 
    }
    Set-Content -Path $hostsPath -Value $lines -Force
    Write-Host "‚úÖ ƒê√£ d·ªçn d·∫πp entries test" -ForegroundColor Green
    
} catch {
    Write-Host "‚ùå L·ªói khi test ch·∫∑n website: $_" -ForegroundColor Red
}
Write-Host ""

# Test 3: Ki·ªÉm tra processes
Write-Host "üß™ Test 3: Li·ªát k√™ c√°c ·ª©ng d·ª•ng ƒëang ch·∫°y" -ForegroundColor Cyan
$processes = Get-Process | Where-Object {
    $_.MainWindowTitle -ne "" -and 
    $_.ProcessName -notin @("explorer", "SystemSettings", "ApplicationFrameHost")
} | Select-Object -First 5

if ($processes) {
    Write-Host "‚úÖ T√¨m th·∫•y c√°c ·ª©ng d·ª•ng ƒëang ch·∫°y:" -ForegroundColor Green
    $processes | ForEach-Object {
        Write-Host "   - $($_.ProcessName): $($_.MainWindowTitle)" -ForegroundColor Gray
    }
} else {
    Write-Host "‚ö†Ô∏è  Kh√¥ng c√≥ ·ª©ng d·ª•ng n√†o c√≥ window ƒëang ch·∫°y" -ForegroundColor Yellow
}
Write-Host ""

# Test 4: Ki·ªÉm tra log directory
Write-Host "üß™ Test 4: Ki·ªÉm tra th∆∞ m·ª•c logs" -ForegroundColor Cyan
$logPath = "$env:LOCALAPPDATA\KidGuard\Logs"
if (-not (Test-Path $logPath)) {
    New-Item -ItemType Directory -Path $logPath -Force | Out-Null
    Write-Host "‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c logs: $logPath" -ForegroundColor Green
} else {
    Write-Host "‚úÖ Th∆∞ m·ª•c logs ƒë√£ t·ªìn t·∫°i: $logPath" -ForegroundColor Green
    
    # Li·ªát k√™ log files
    $logFiles = Get-ChildItem -Path $logPath -Filter "*.log" -ErrorAction SilentlyContinue
    if ($logFiles) {
        Write-Host "   T√¨m th·∫•y $($logFiles.Count) file log:" -ForegroundColor Gray
        $logFiles | Select-Object -First 3 | ForEach-Object {
            Write-Host "   - $($_.Name) ($([Math]::Round($_.Length/1KB, 2)) KB)" -ForegroundColor Gray
        }
    }
}
Write-Host ""

# Test 5: Test configuration
Write-Host "üß™ Test 5: Ki·ªÉm tra file c·∫•u h√¨nh" -ForegroundColor Cyan
$configPath = Join-Path $PSScriptRoot "src\KidGuard\appsettings.json"
if (Test-Path $configPath) {
    Write-Host "‚úÖ File appsettings.json t·ªìn t·∫°i" -ForegroundColor Green
    
    try {
        $config = Get-Content $configPath | ConvertFrom-Json
        Write-Host "   - Monitoring interval: $($config.KidGuard.Monitoring.CheckIntervalSeconds)s" -ForegroundColor Gray
        Write-Host "   - App monitoring: $($config.KidGuard.Monitoring.EnableApplicationMonitoring)" -ForegroundColor Gray
        Write-Host "   - Website blocking: $($config.KidGuard.Monitoring.EnableWebsiteBlocking)" -ForegroundColor Gray
        Write-Host "   - Activity logging: $($config.KidGuard.Monitoring.EnableActivityLogging)" -ForegroundColor Gray
    } catch {
        Write-Host "‚ùå Kh√¥ng th·ªÉ ƒë·ªçc file config: $_" -ForegroundColor Red
    }
} else {
    Write-Host "‚ùå Kh√¥ng t√¨m th·∫•y appsettings.json" -ForegroundColor Red
}
Write-Host ""

# Test 6: Ch·∫°y ·ª©ng d·ª•ng (optional)
Write-Host "üöÄ B·∫°n c√≥ mu·ªën ch·∫°y KidGuard kh√¥ng? (Y/N): " -ForegroundColor Yellow -NoNewline
$runApp = Read-Host
if ($runApp -eq 'Y' -or $runApp -eq 'y') {
    Write-Host "ƒêang kh·ªüi ƒë·ªông KidGuard..." -ForegroundColor Cyan
    
    $exePath = Join-Path $PSScriptRoot "src\KidGuard\bin\Release\net9.0-windows\KidGuard.exe"
    if (Test-Path $exePath) {
        Start-Process $exePath -Verb RunAs
        Write-Host "‚úÖ KidGuard ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông!" -ForegroundColor Green
    } else {
        Write-Host "Ch·∫°y t·ª´ dotnet CLI..." -ForegroundColor Yellow
        Start-Process "dotnet" -ArgumentList "run --project src/KidGuard --configuration Release" -Verb RunAs
    }
}

Write-Host ""
Write-Host "================================" -ForegroundColor Cyan
Write-Host "   TEST HO√ÄN TH√ÄNH!            " -ForegroundColor Cyan
Write-Host "================================" -ForegroundColor Cyan
Write-Host ""

# T√≥m t·∫Øt k·∫øt qu·∫£
Write-Host "üìä T√ìM T·∫ÆT:" -ForegroundColor Yellow
Write-Host "- Build: ‚úÖ Th√†nh c√¥ng" -ForegroundColor Green
Write-Host "- Hosts file: ‚úÖ C√≥ th·ªÉ truy c·∫≠p" -ForegroundColor Green
Write-Host "- Logging: ‚úÖ S·∫µn s√†ng" -ForegroundColor Green
Write-Host "- Configuration: ‚úÖ ƒê√£ c·∫•u h√¨nh" -ForegroundColor Green
Write-Host ""
Write-Host "Nh·∫•n ph√≠m b·∫•t k·ª≥ ƒë·ªÉ tho√°t..." -ForegroundColor Gray
$null = $Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown')
